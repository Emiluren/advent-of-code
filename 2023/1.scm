(use-modules (ice-9 textual-ports)
             (ice-9 rdelim)
             (ice-9 regex))

;; Part 1
(with-input-from-file "1input"
  (lambda ()
    (let loop ((line (read-line))
               (sum 0))
      (if (eof-object? line)
          (simple-format #t "Part 1: ~A~%" sum)
          (let ((first-i (string-index line char-numeric?))
                (last-i (string-rindex line char-numeric?)))
            (loop (read-line)
                  (+ (string->number (string (string-ref line first-i)
                                             (string-ref line last-i)))
                     sum)))))))

(define digit-alist
  '(("0" . 0)
    ("1" . 1)
    ("2" . 2)
    ("3" . 3)
    ("4" . 4)
    ("5" . 5)
    ("6" . 6)
    ("7" . 7)
    ("8" . 8)
    ("9" . 9)
    ("one" . 1)
    ("two" . 2)
    ("three" . 3)
    ("four" . 4)
    ("five" . 5)
    ("six" . 6)
    ("seven" . 7)
    ("eight" . 8)
    ("nine" . 9)))

(define (match->number match)
  (assoc-ref digit-alist (match:substring match)))

;; Part 2
(define dig-regex (make-regexp "[0-9]|one|two|three|four|five|six|seven|eight|nine"))
(with-input-from-file "1input"
  (lambda ()
    (let loop ((line (read-line))
               (sum 0))
      (if (eof-object? line)
          (simple-format #t "Part 2: ~A~%" sum)
          (let ((matches (map match->number (list-matches dig-regex line))))
            (simple-format #t "~A ~A ~A ~A~%" (map match:substring (list-matches dig-regex line)) matches (car matches) (car (last-pair matches)))
            (loop (read-line)
                  (+ (* 10 (car matches))
                     (car (last-pair matches))
                     sum)))))))
