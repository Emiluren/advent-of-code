let input =
"""
                                   H     C       O         L   Q     X   U                                         
                                   W     N       V         H   G     H   P                                         
  #################################.#####.#######.#########.###.#####.###.#######################################  
  #...#...#.#.......#...................#.#...#.....#.#.#...#.......#...#.....#...#.......#...........#.......#.#  
  ###.#.###.###.###.#####.#####.#######.#.#.#.#####.#.#.#.###.#.#.#####.#.#####.###.#.#.###.###.#####.###.#####.#  
  #.......#.#.....#...#...#.#...#...#...#...#...#.#.....#.....#.#.#.....#.......#...#.#.......#.....#.#.#.#.#...#  
  #.#.#.###.#####.#.#.#####.###.#.#.#.#.#.#.###.#.#####.#######.###.#.#.###.#######.#####.#####.#######.#.#.###.#  
  #.#.#...#...#...#.#.........#.#.#...#.#.#.#.#.#.......#.....#...#.#.#.#...........#...#...#.#...#.......#.....#  
  #######.#.#######.#.###.#.#####.###########.#.#.###.###.###.#.#####.#######.#.#####.###.###.###########.###.###  
  #.........#.#...#.#.#.#.#...............#.....#...#...#...#...#.#.......#...#.#.#.#...#.#.#.#.#.....#.#.......#  
  #########.#.###.###.#.#############.#########.#.#######.###.#.#.#.###.###.#.###.#.#.#####.#.#.#.#####.#.###.#.#  
  #.#...#.....#.#.......#...#.#.........#...#...#...#...#.#...#.#.#...#...#.#.#...#.#...#.#.#.........#...#...#.#  
  #.###.###.#.#.###.#.#####.#.###.###.#.#.###.#.#.#####.#.###.###.#.#######.###.###.#.###.#.#.###########.###.###  
  #.#.#.....#.#...#.#.#...........#...#.#.....#.#...#.......#.#.........#.....#.#.........#...#.#.#.#.....#.....#  
  #.#.#.###.#####.#######.###.###.###.###.#.#.###.#.###.###.#####.#.#####.###.#.#.#.#.###.#.###.#.#.#########.###  
  #.....#.#.#.#.#.......#.#...#.....#...#.#.#.#...#...#.#.......#.#.#.#.....#.....#.#...#.............#.#.#.....#  
  #######.#.#.#.#######.#.#######.#######.#######.#.#####.#######.###.#########.#####.#.#.#####.#.###.#.#.#.#.###  
  #...........#.....#...#...#.#...#.#.#.......#...#.#.........#.#...#...#.#...#.#...#.#.#.....#.#.#.#.#...#.#.#.#  
  ###########.#####.#.#######.###.#.#.###.###.###.###.#.#.#.###.#.###.###.###.#.#.###.#######.#.###.###.#####.#.#  
  #...#.........#...#.#.#.....#.....#...#.#...#...#.#.#.#.#.....#.#.#.......#.....#.......#.#.#.#.#.#...#...#.#.#  
  ###.###.#.#.###.#.#.#.###.#####.###.#.#.###.###.#.###########.#.#.#.#######.#.#####.#####.#####.#.###.###.#.#.#  
  #.......#.#...#.#.........#.#...#.#.#.#.#.#.#.#...#.#.#.......#.#.......#.#.#.#.#.#.#.#...........#.....#.#...#  
  #####.#####.###.#.#.#####.#.###.#.#.###.#.#.#.#.#.#.#.#.###.#.#.###.#.###.###.#.#.###.#####.#########.#.#.#.###  
  #.....#.#.....#.#.#...#.....#...#.....#...#.#...#.....#...#.#.#.....#.#.#.............#.#...#.#.....#.#.......#  
  #.#.###.#.#.#############.#####.#.###.###.###########.###.#######.###.#.#.#######.#####.#.#.#.#####.###.###.###  
  #.#.#.....#...#...#...#.#...#.#...#...#.......#.....#.#.......#...#...#.........#.....#.#.#.#.....#...#.#.....#  
  ###########.###.#####.#.#.###.#.###.###.#.#.###.#.###.#.#######.#.###.###.###.#.###.###.#.###.#####.#######.###  
  #.#.....#.#.....#.#.#.#...#.....#.....#.#.#.#.#.#.#...#.#.#.#.#.#.#...#...#...#...#.....#...#.#.#.....#.....#.#  
  #.###.###.###.#.#.#.#.###.###########.#.#####.#.#.#.#.#.#.#.#.#######.###.###.#########.#.#.#.#.###.#.#.#####.#  
  #.#.#...#...#.#.#.#.#.#.#.......#.....#.....#...#...#.#.........#.......#...#.........#.#.#.#...#.#.#...#.#.#.#  
  #.#.###.###.###.#.#.#.#.#.#########.#####.#####.#######.#.#########.#########.###########.#####.#.###.#.#.#.#.#  
  #.#.#.........#.#.#.#...#...#      O     X     C       H C         O         U    #.....#.#.#...#...#.#.#.#.#.#  
  #.#.#######.###.#.#.#.###.###      V     H     D       W N         M         D    ###.###.#.###.###.###.#.#.#.#  
  #...................#.......#                                                     #.#.......#.#.#...#.....#...#  
  #####.###.###.#.#.#.#.###.#.#                                                     #.#.###.#.#.#.###.#####.###.#  
  #.#...#.....#.#.#.#...#.#.#..VW                                                 CA..#.#...#...............#....UD
  #.#######.###.#.###.#.#.#.#.#                                                     #.#######.###########.###.#.#  
PW..#.......#.#.#.#...#.#...#.#                                                     #.#.........#...........#.#.#  
  #.###.###.#.###########.###.#                                                     #.#.#.###.#######.#######.###  
  #.......#.........#...#.#...#                                                     #.#.#.#...#...#...#...#.#...#  
  #######.#.###.#######.#######                                                     #.#.#####.#.#####.#.#.#.#.###  
  #.#...#.#.#...#.........#...#                                                     #.....#.#.#.#...#...#.......#  
  #.#.#######.#####.###.#####.#                                                     #######.###.#.###############  
CD..#.#.#...#.#.#.....#.#.#.#..KT                                                 QD......#...#.................#  
  #.#.#.###.###.#####.#.#.#.#.#                                                     #####.#.#.#.###.###.#.###.###  
  #.....#...#.#.......#.....#.#                                                     #.....#.#...#.....#.#.#.....#  
  #.#.#####.#.#.#.###.#.#.#.#.#                                                     #.#.###.#.#.###.###.#.###.#.#  
  #.#...........#...#.#.#.#...#                                                     #.#.#...#.#...#...#.#.#.#.#..GK
  ###########################.#                                                     #.###.#.#####.#.#######.###.#  
  #.....................#.#...#                                                     #.....#...#.#.#...#.#.....#.#  
  #.#####.#.#####.#.###.#.#####                                                     #######.###.#######.###.#.###  
  #...#.#.#...#...#...#.....#.#                                                     #.....#.#...#.......#.#.#...#  
  ###.#.###.#####.#.###.###.#.#                                                     #.###.#####.###.#.#.#.#####.#  
  #.#.....#.#.#...#.#...#.#.#.#                                                   AI..#.#.....#.....#.#.#...#....MO
  #.###.#####.#######.#.#.#.#.#                                                     #.#.#####.#.###.###.#.#####.#  
VW............#.#...#.#.#......XU                                                   #.#...#.......#.#.........#.#  
  ###.#.#.#####.###.###########                                                     ###.###.###########.#####.#.#  
  #...#.#.....#.#.#.......#...#                                                     #.....#.#.#...#...#.#...#...#  
  #########.###.#.#.#.#.###.#.#                                                     #.###.#.#.#.###.#####.#######  
OM....#.#.#.#...#...#.#.#.#.#.#                                                     #.#...#.#.......#.......#...#  
  #.###.#.#####.###.#####.#.#.#                                                     ###.#.###.###.###.#####.#.#.#  
  #...#...#...#.....#.#.....#.#                                                     #...#...#...#.....#.#.#...#..ZL
  ###.#.#.###.#.###.#.#####.#.#                                                     ###.###.#.###.#####.#.###.#.#  
  #.#...#.......#...........#..TD                                                 MO......#...#.#...#.#...#...#.#  
  #.#####################.#####                                                     ###########.#####.#.#########  
  #...................#...#...#                                                     #...................#...#...#  
  #.#####.#.#.#.#####.#####.#.#                                                     ###.#.###.###.#####.###.#.#.#  
  #.....#.#.#.#...#.#.#.#...#.#                                                     #...#.#...#.....#.....#.#.#.#  
  #####.#####.#.###.#.#.###.#.#                                                     #.#.#.#############.###.#.#.#  
AF....#...#.#.#...#.........#.#                                                   GD..#.#.#.#...#...#.........#..KT
  #.#.#.###.###.#####.#######.#                                                     #######.###.###.#######.#####  
  #.#.....#...#.#...#.#.#...#..UP                                                 GK....#.#...............#.#...#  
  ###.#####.#####.###.#.#.###.#                                                     #.#.#.###.###.#.###.#######.#  
  #...#...#...#.....#.#.....#.#                                                     #.#...#.....#.#...#.....#.#.#  
  #####.###.###.#########.#.###                                                     ###.#.#.#####.#.###.###.#.#.#  
  #...#.#.#.....#.....#.#.#...#                                                     #...#.#.....#.#.#...#...#....RC
  #.###.#.#.###.###.#.#.#.###.#                                                     #####.#.#############.#####.#  
  #...#.#.....#.#...#.#.....#.#                                                     #.#.......#.....#.#.#.......#  
  #.###.#####.#.#.###.#.#.###.#                                                     #.#.#.###.#.###.#.#.#######.#  
ZE............#.....#...#...#..LH                                                   #.#.#.#.#.#.#.......#...#...#  
  #.#.#################.#######                                                     #.#####.#########.#.#.#.#####  
  #.#...#.#.#.....#.#.#.#.....#                                                     #.#.#.........#.#.#...#.....#  
  #######.#.#.#.#.#.#.#.###.#.#                                                     #.#.###.#.#.###.#.#######.###  
  #...........#.#.#...#.#...#..JN                                                 AF..#...#.#.#.#.#...#.....#.#..JN
  #####.#######.###.#######.###                                                     #.#.###.#.###.###.#.###.#.#.#  
  #...........#.....#...#.#...#                                                     #.......#.........#.#.......#  
  #########.#####.###.###.#.###                                                     #.#.#####.#######.###.###.#.#  
QD..............#.............#                                                     #.#.#...........#.#.....#.#.#  
  #.#.###.###.#####.#.###.###.#      Q           Z       R   P           R   Z      #####.###.#######.#######.###  
  #.#.#.#.#.......#.#.#.#.#...#      G           L       C   W           Y   E      #...#.#.....#.#...#.........#  
  #.###.#.#.#.#######.#.#.#.#.#######.###########.#######.###.###########.###.#######.###.###.#.#.#.#.###.###.#.#  
  #...#...#.#.#...#.....#.#.#...#.........#.......#...#...#.....#.........#.........#...#.#...#.#.#.#.#...#...#.#  
  #.###.#.#####.###.#.#######.###.###.#.#####.###.#.###.###.#####.#.#####.###.#.#.###.#######.###.#.#.###.###.#.#  
  #...#.#...#.#...#.#...#.....#...#...#...#...#.#.#...#.#.#...#.#.#.#...#.#...#.#...........#...#...#.#...#...#.#  
  #.#.###.###.#.#####.#######.###.#####.###.###.###.#.#.#.###.#.###.#.###########.#.#.#############.#.###.#.#.#.#  
  #.#.#.......#...#.....#.......#.#.#...#.......#...#.....#.#...#.....#.#...#.....#.#...#.#.#.#.....#.#...#.#.#.#  
  #.###.#.#.#####.###.#.###.#.#####.#.#####.#.#####.#######.#.#######.#.#.#####.#.#.###.#.#.#.###.###.###.#.###.#  
  #...#.#.#...#.......#.#...#.#.#...#.....#.#...#.#.....#.........#.....#.#.#...#.#...#.......#...#.....#.#...#.#  
  #.#######.###.#.###.#########.#.#.#.###.###.#.#.#.#.#####.###.#####.###.#.#.#.###.#####.#.#.###.###.#####.#####  
  #.....#...#...#...#...#.......#.#.#.#.....#.#.#.#.#.#.#.....#.#.......#.....#.#.......#.#.#...#.#.#.#.....#...#  
  #.#.#.###.#.###.###.###.#####.#.#.###.#.###.###.#.#.#.###.#####.#.###.###.#######.#####.#########.#.###.#.###.#  
  #.#.#...#.#...#.#.....#.#.......#.....#.#...#.#.#.#.....#.#.....#.#...#.....#.#.....#.#...#.......#.#...#.....#  
  #.###.#.###.###.#.#.#.#####.#####.#####.#.###.#.#######.#.#####.#.#######.###.#######.#######.###.###.#.#.#####  
  #.#...#.#.#...#.#.#.#.#.....#.#.......#.#.#.#...........#.#.#...#...#.........#.......#.#.......#.#.#.#.#.....#  
  #.#.#.###.#.###.#####.###.###.###.#######.#.#########.###.#.#####.###.###.#########.###.###.#####.#.#####.#.#.#  
  #.#.#.#.......#.#.....#.#.#...........#.....#...#.#.....#...#.#.....#.#...#...........#.....#.#.#.#...#...#.#.#  
  #.#######.#######.#.###.#.#######.#.#.###.#####.#.###.###.###.###.#######.#######.#####.###.#.#.###.#####.#####  
  #.....#...#.......#.....#.#.#.#...#.#.#.#...#.....#.#...#...#...#.#.#.#.#.#.....#.........#.....#.....#.#.#...#  
  #.#.#.#.#.###.#.###########.#.###.#.#.#.#.###.###.#.###.#.#####.#.#.#.#.#.#.#####.#####.#####.#.#.###.#.#.###.#  
  #.#.#.#.#...#.#.#.#.......#.......#.#.#.........#.#.....#...#.#...#.....#...........#.#.....#.#.....#.#.......#  
  #.###.###.#.#####.#######.###.###.#########.###.#####.#.#.###.###.###.#.#######.#.#.#.###.###.#.#########.#.###  
  #.#...#.#.#...#.#.#.#.#.........#.#...#.......#.#...#.#.#.......#...#.#.#.....#.#.#.#...#...#.#.#.....#...#...#  
  #######.#.#.#.#.#.#.#.###########.###.###.#####.#.#####.###.###.###.#.#.#.#.###.#.###.#.#########.#######.#.###  
  #.....#...#.#.#.....#.....#.#.........#.......#.#.........#.#...#.....#.#.#.....#.....#.#...#.........#.#.#...#  
  ###.#.###.#######.###.#.#.#.#.#.#.###.#######.#######.###.###.#########.#.###.#.#.#.#.###.#######.###.#.###.###  
  #...#...........#.....#.#.....#.#...#...#...#.#...#.#...#.#.....#.......#...#.#.#.#.#.....#.#.......#.....#...#  
  #.#.###.#.#.#.#####.###.#.#.#####.###.#.#.#.#.#.#.#.#.#######.#####.#.#.###.#.#.###.#.###.#.###.#.#########.#.#  
  #.#.#...#.#.#.#.......#.#.#.#.....#...#.#.#.....#.#.......#...#.....#.#.#...#.#...#.#...#.......#.........#.#.#  
  ###################################.#####.#########.#.#######.###.#.#####.#####################################  
                                     X     T         Z A       C   G A     R                                       
                                     U     D         Z I       A   D A     Y                                       
"""

// Queue type comes from https://github.com/raywenderlich/swift-algorithm-club/blob/master/Queue/Queue-Optimized.swift
// used under the MIT license
public struct Queue<T> {
    fileprivate var array = [T?]()
    fileprivate var head = 0

    public var isEmpty: Bool {
        return count == 0
    }

    public var count: Int {
        return array.count - head
    }

    public mutating func enqueue(_ element: T) {
        array.append(element)
    }

    public mutating func dequeue() -> T? {
        guard let element = array[guarded: head] else { return nil }

        array[head] = nil
        head += 1

        let percentage = Double(head)/Double(array.count)
        if array.count > 50 && percentage > 0.25 {
            array.removeFirst(head)
            head = 0
        }

        return element
    }

    public var front: T? {
        if isEmpty {
            return nil
        } else {
            return array[head]
        }
    }
}

extension Array {
    subscript(guarded idx: Int) -> Element? {
        guard (startIndex..<endIndex).contains(idx) else {
            return nil
        }
        return self[idx]
    }
}

struct Pair<T: Hashable>: Hashable {
    var p1: T
    var p2: T

    static func == (lhs: Pair<T>, rhs: Pair<T>) -> Bool {
        return lhs.p1 == rhs.p1 && lhs.p2 == rhs.p2
    }

    func hash(into hasher: inout Hasher) {
        hasher.combine(p1)
        hasher.combine(p2)
    }
}

let inputMap = input.split(separator: "\n").map { Array($0) }

var innerPortals = [Pair<Character>: Pair<Int>]()
var outerPortals = [Pair<Character>: Pair<Int>]()

func pushPortal(
  _ dict: inout [Pair<Character>: Pair<Int>],
  _ portal: (Character, Character),
  _ position: (Int, Int)
) {
    let (p1, p2) = portal
    let (r, c) = position
    if ("A"..."Z").contains(p1) {
        dict[Pair(p1: p1, p2: p2)] = Pair(p1: r, p2: c)
    }
}

// Outer portals
for c in 2...112 {
    pushPortal(&outerPortals, (inputMap[0][c], inputMap[1][c]), (2, c)) // top
    pushPortal(&outerPortals, (inputMap[119][c], inputMap[120][c]), (118, c)) // bottom
}

for r in 2...119 {
    pushPortal(&outerPortals, (inputMap[r][0], inputMap[r][1]), (r, 2)) // left
    pushPortal(&outerPortals, (inputMap[r][113], inputMap[r][114]), (r, 112)) // right
}

// Inner portals
for c in 33...81 {
    pushPortal(&innerPortals, (inputMap[31][c], inputMap[32][c]), (30, c)) // top
    pushPortal(&innerPortals, (inputMap[88][c], inputMap[89][c]), (90, c)) // bottom
}

for r in 33...87 {
    pushPortal(&innerPortals, (inputMap[r][31], inputMap[r][32]), (r, 30)) // left
    pushPortal(&innerPortals, (inputMap[r][82], inputMap[r][83]), (r, 84)) // right
}

var portalLinks = [Pair<Int>: Pair<Int>]()

for (name, innerPos) in innerPortals {
    let outerPos: Pair<Int>! = outerPortals[name]
    portalLinks[innerPos] = outerPos
    portalLinks[outerPos] = innerPos
}

func adjacentPositions(_ pos: Pair<Int>) -> [Pair<Int>] {
    let (r, c) = (pos.p1, pos.p2)
    return [
      Pair(p1: r, p2: c - 1),
      Pair(p1: r, p2: c + 1),
      Pair(p1: r - 1, p2: c),
      Pair(p1: r + 1, p2: c),
    ];
}

func solvePart1() -> Int? {
    let startState = outerPortals[Pair(p1: "A", p2: "A")]!
    let endState = outerPortals[Pair(p1: "Z", p2: "Z")]!

    var queue = Queue<Pair<Int>>()
    var discovered: Set<Pair<Int>> = [startState]
    var distanceTo = [startState: 0]

    queue.enqueue(startState)

    while let pos = queue.dequeue() {
        let dist: Int! = distanceTo[pos]

        if pos == endState {
            return dist
        }

        for newPos in adjacentPositions(pos) {
            let (r, c) = (newPos.p1, newPos.p2)
            let char = inputMap[r][c]

            if discovered.contains(newPos) || char != "." {
                continue
            }

            discovered.insert(newPos)
            distanceTo[newPos] = dist + 1
            queue.enqueue(newPos)
        }

        if let teleportedPos = portalLinks[pos] {
            if !discovered.contains(teleportedPos) {
                discovered.insert(teleportedPos)
                distanceTo[teleportedPos] = dist + 1
                queue.enqueue(teleportedPos)
            }
        }
    }

    return nil
}

print("Part 1: \(solvePart1()!)")

struct RecursiveState: Hashable {
    var r: Int
    var c: Int
    var level: Int

    init(fromPair pair: Pair<Int>) {
        r = pair.p1
        c = pair.p2
        level = 0
    }

    init(r: Int, c: Int, level: Int) {
        self.r = r
        self.c = c
        self.level = level
    }

    static func == (lhs: RecursiveState, rhs: RecursiveState) -> Bool {
        return lhs.r == rhs.r && lhs.c == rhs.c && lhs.level == rhs.level
    }

    func hash(into hasher: inout Hasher) {
        hasher.combine(r)
        hasher.combine(c)
        hasher.combine(level)
    }
}

func solvePart2() -> Int? {
    let startState = RecursiveState(fromPair: outerPortals[Pair(p1: "A", p2: "A")]!)
    let endState = RecursiveState(fromPair: outerPortals[Pair(p1: "Z", p2: "Z")]!)

    var queue = Queue<RecursiveState>()
    var discovered: Set<RecursiveState> = [startState]
    var distanceTo = [startState: 0]

    queue.enqueue(startState)

    while let state = queue.dequeue() {
        let dist: Int! = distanceTo[state]

        if state == endState {
            return dist
        }

        let stateAsPair = Pair(p1: state.r, p2: state.c)
        for newPos in adjacentPositions(stateAsPair) {
            let newState = RecursiveState(r: newPos.p1, c: newPos.p2, level: state.level)
            let char = inputMap[newState.r][newState.c]

            if discovered.contains(newState) || char != "." {
                continue
            }

            discovered.insert(newState)
            distanceTo[newState] = dist + 1
            queue.enqueue(newState)
        }

        if let teleportedPos = portalLinks[stateAsPair] {
            let isInner =
              state.r >= 30 && state.r <= 92 &&
              state.c >= 30 && state.c <= 84

            var teleportedState = RecursiveState(fromPair: teleportedPos)
            if isInner {
                teleportedState.level = state.level + 1
            } else {
                teleportedState.level = state.level - 1
            }

            if !discovered.contains(teleportedState) && teleportedState.level >= 0 {
                discovered.insert(teleportedState)
                distanceTo[teleportedState] = dist + 1
                queue.enqueue(teleportedState)
            }
        }
    }

    return nil
}

print("Part 2: \(solvePart2()!)")
