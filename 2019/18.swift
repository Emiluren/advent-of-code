let input = """
#################################################################################
#l....#.........#.....#.....#...........#...........#.......#...#...............#
#.#.###.#####.#.#####.#.###.#.###.#####.#.#.#########.#####.#.#.#.#####.#.#######
#.#.....#.#...#i......#.#...#.Z.#.....#.#.#e......A...#...#.#.#..q#...#.#.#.....#
#.#####.#.#.###########.#.###.#######.###.#########.#####.#.#.#####.#.#.###.###.#
#.#...#.#.#.....#...#...#.....#.....#...#...#.....#.......#.#...#...#.#.#.....#.#
#.#.#.#.#.#####.#.#.#.#########.###.###.#.###.###.#######.#.#.###.###.#.#.#####F#
#.#.#.#.......#...#.#.#.#.......#.....#.#.#...#.#...#.....#.#.#...#.#...#u..#...#
#.#.#.#############.#.#.#.###########.#.###.###.###.###.###.#.#.###.###.###.#.#.#
#.#.#...............#.#.#.....#...#...#.#...#.....#...#.#.#...#.#.........#.#.#.#
#.#.###############.#.#.#####.#.#.###.#.#.###.#######.#.#.#####.#####.#####.#.###
#.#...#.......#.#...#...#...#...#...#.#.#...#.#...#...#.#.N...#.....#...#...#...#
#####.#.#####.#.#.#####.###.#####.#.#.#.###.#.#.#.#.###.#.#.#######.###.#.#####.#
#.....#.#.....#.#...#.......#...#.#.#.#.#...#...#.#.#...#.#...#...#...#.#.#.#...#
#.#####.#.#####T###.#.#######.#.###.#.#.#.###.###.#.###.#.###.#.#.###.###.#.#.#.#
#.......#.#.........#...#.....#.....#.#.#...#.#...#...#.#..x#...#.#...#...#.#.#.#
#.#######.###########.###.###########.#.###.###.#.###.#.#########.#.###.###.#.#.#
#.#...#...#.......#...#...#.......#...#d#.#.#...#...#.#...#.......#.........#.#.#
#.###.#.###.#####.#.###.###.#####.#.###.#.#.#.#####.#.###.#.###.#######.#####J#.#
#.....#g..#.#...#.#...#.#.#...#...#...#.#.#...#...#.#.#.....#.S.#.....#.#.....#.#
#####.###.#.###.#.#.###.#.#.#.#.#####.#.#.#####.###.#.###.#####.#.###.###.#######
#.......#.......#.#.#...#.#.#.#...#...#.#...#.......#...#.#...#.#...#...#.......#
#############.###.#.#####.#.#.###.#.###.###.#.#########.###.#######.###.#.#####.#
#.........#...#...#.....#.#.#.#.#.#.#...#...#.#...#...#...#.........#...#.#.#...#
#.#######.###.#.#######.#.#.#.#.#.#.#.#B#.###.#.#.#.#.###.###########.###.#.#.#.#
#.#.....#...#.#.......#.#.#.#.#...#.#.#.#.....#.#.#.#...#...........#.#...#.#.#.#
#.###.#.###.#######.#.#.#.#.#.#.###.###.#.#####.#.#.#.#.#########.#.#.#.###.#.###
#...#.#...#...#...#.#...#...#.#.#...#...#.#.....#...#.#.#.....#.#.#.#.#.....#...#
###.#.#.#####.#.#.#.#####.###.#.#.###.###.###########.#.###.#.#.#.#.#G#########.#
#...#.#.#...#...#.#...#...#...#.#.#.....#.#.........#.#.....#.#.#.#.#.....#.....#
#.###.#.#.#.#####.###.#####.#.###.#.###.#.#.#######.#.#######.#.#.#######.#.###.#
#.#...#...#.....#...#.......#.#...#.#...#.#.#...#.#.#.....#.#.#.#.......#.#...#.#
#.#########.#.#.###.###.#######.###.#.#.#.#.#.#.#.#.###.#.#.#.#.#######.#.#.#.###
#.#.......#.#.#.#.#.#...#.......#...#.#.#.#...#.#.#...#.#.#.#.....#.#...#.#.#...#
#.#.#####.###.#.#.#.#####.###########.#.#.#.###.#.###.#.#.#.#####.#.#.###.#.###P#
#.#...#.#.....#.#.#...#...#...........#.#.#...#.#...#.#.#.#.......#.#.....#.#...#
#.###.#.#######.#.###.#.#########.#####.#.#####.#.#.#.###.#.#######.#########.#.#
#...#.#...#.....#...#...#.......#...#...#...#...#.#.#.#...#...#...#...#.......#.#
###.#.#.###.#####.#.#####.#####.###.#.#####.#.###.###.#.#####.#.#.#.#.###.#####.#
#w....#...........#.......#.........#.........#.........#.......#...#.....#.....#
#######################################.@.#######################################
#...........#...K...#.......#.......#.....#.....#.........#.......#.............#
#.#######.###.#.#####.#####.#.###.###.#.#.#.#.###.#####.###.#.#.###.###########.#
#p......#.#...#.......#...#.#...#.#...#.#...#.........#.....#.#.#...#.........#.#
#######.#.#.###########.#.#.###.#.#.###.#.###################.###.###.#.###.###.#
#y....#.#...#.#.......#.#.#...#.#...#.#.#...#...#.#.........#.....#...#...#.#...#
#.#.###.#####.#.###.#.#.#.#.#.#.#####.#.###.#.#.#.#.#######.#.#####.#####.###.#.#
#.#.#...#...#...#...#.#h#...#.#...#...#.#.#.#.#.#.#.#...#...#.....#.#...#.#...#.#
#.#.#.###.#.#.###.#####.###.#####.#.###.#.#.#.#.#.#.#.#.###.#####.###.#.#.#.###.#
#.#.#.....#.#...#...#...#...#...#...#...#.#.#.#...#.#.#...#.....#.#...#...#.#...#
#M#.#######.###.###.#.###.###.#.#.###.###.#.#.###.#.#.###.#####.#.#.#####.#.#####
#.#.#.....#.#...#...#...#...#.#...#...#.#b..#...#.#...#z#.#.....#...#...#.#.....#
#.###.#.#.#.#####.#####.#####.#####.###.#.###.#.#######.#.#####.#####.###.#####.#
#...#.#.#.#.....#.....#.#...#.#.....#...#.#...#.........#.....#.#.#.........#...#
###.#.#.#.#####.###.#.#.#.#.#.#.#####.#.#.#####.#######.#####.#.#.#.#######.#.#.#
#...#.#.#.....#.....#.#...#...#...#...#.#.#...#.......#.....#.#.#...#...#...#.#.#
#.###O#.#####.#######.#######D###.#.###.#.#.#.###########.#.#.#.#####.#.#####H#.#
#.#...#.#.........#.....#...#...#.#...#.#...#.............#.#.#.......#.#...#.#.#
#.#.###.###########.#####.#.#####.###.#.###.#############.###.#########.#.#.#.#.#
#.#.#.#.#...#.......#.....#.......#...#.#...#.....#.......#...#.....#.....#...#k#
#.#.#.#.#.#.#.#######.#############.#####.###.###.#########.###.###.###########.#
#...#.#...#.#f#.....#.#.......#...#.....#.#...#.#.......#...#...#.#...#.....#.#.#
#.###.#####.#.#####.###.#####.#.#.#####.###.###.#######.#.#######.###.#.###.#.#.#
#.#...#..r..#.....#.....#.....#.#.......#...#.....#...#...#.........#...#...#.#.#
#.###.#V###.#####.#.#####.#####.#######.#.#######.#.#.###.#.#######.#####.###.#.#
#.#...#...#.....#...#...#...#...#.....#.#.#.....#.#.#.....#.....#.....#...#.....#
#.#.#####.#####.#####.#.###.###.#.#####.#.#.###.#.#.###########.#.###.#E###.#####
#m#.#.....#.#.....R...#..o#.#...#.#...#.#.#.#...#...#.........#.#.#.#.#.#.#...#.#
#.#.#.#####.#.###########.#.#.###.#.#.#.#.#.#.#######.#######.#.#.#.#.#.#.###.#.#
#...#.#.......#.....#...#.#.#.#.#...#.#.#...#.........#...#.#.#.#.#...#.#...#.#.#
#.###.#######.#.###.###.#.#.#.#.#.###.#.###############.#.#.#.#.#.#####.###.#.#.#
#.#...#.....#.#...#...#...#.#.#...#...#.#.........#.....#...#.I.#.#.Q.#...#.#...#
#.#.###.###.#####.###.#####.#.#.###.###.#.###.#####.###.###.#####.#.#.###.#.###.#
#.#v#...#.#.....#n..#.#...#.#.#...#.L...#...#.#.....#.#.#..j....#...#.#...#...#.#
#.#.#X###.#####.###.#.#.#.#.#.###.#########.#.#.#####.#.#.###########.#.###.#.#.#
#.#...#...Y.#.#.....#s#.#.#...#.#...#...#.#.#...#.....#.#...#.........#...#.#...#
#.#####.###.#.#######.#.#.#####.###.###.#.#.#####.###.#.#####.###########.#.#####
#.#.......#.#.....#.#.#.#.#.......#...#.#...#.....#.#.#.....#..a..........#.W...#
#.#######.#.###.#C#.#.#.#.#.###.#####.#.#.###.#####.#U#####.###################.#
#.........#c....#...#...#.....#.........#.....#t..........#.....................#
#################################################################################
"""

// Queue type comes from https://github.com/raywenderlich/swift-algorithm-club/blob/master/Queue/Queue-Optimized.swift
// used under the MIT license
public struct Queue<T> {
  fileprivate var array = [T?]()
  fileprivate var head = 0

  public var isEmpty: Bool {
    return count == 0
  }

  public var count: Int {
    return array.count - head
  }

  public mutating func enqueue(_ element: T) {
    array.append(element)
  }

  public mutating func dequeue() -> T? {
    guard let element = array[guarded: head] else { return nil }

    array[head] = nil
    head += 1

    let percentage = Double(head)/Double(array.count)
    if array.count > 50 && percentage > 0.25 {
      array.removeFirst(head)
      head = 0
    }

    return element
  }

  public var front: T? {
    if isEmpty {
      return nil
    } else {
      return array[head]
    }
  }
}

extension Array {
    subscript(guarded idx: Int) -> Element? {
        guard (startIndex..<endIndex).contains(idx) else {
            return nil
        }
        return self[idx]
    }
}

let inputMap = input.split(separator: "\n").map { Array($0) }

let startRow: Int = inputMap.firstIndex(where: { $0.contains("@") }) ?? 0
let startCol: Int = inputMap[startRow].firstIndex(of: "@") ?? 0

struct GraphState: Hashable {
    var pos = (startRow, startCol)
    var keys: Set<Character> = []

    static func == (lhs: GraphState, rhs: GraphState) -> Bool {
        let (lhsRow, lhsCol) = lhs.pos
        let (rhsRow, rhsCol) = rhs.pos

        return lhsRow == rhsRow && lhsCol == rhsCol && lhs.keys == rhs.keys
    }

    func hash(into hasher: inout Hasher) {
        let (r, c) = pos
        hasher.combine(r)
        hasher.combine(c)
        hasher.combine(keys)
    }
}

let allKeys = Set(input.filter { $0.isLetter && $0.isLowercase })

func breadthFirstSearch() {
    let startState = GraphState()

    var queue = Queue<GraphState>()
    var discovered: Set<GraphState> = [startState]
    var distanceTo = [GraphState; Int]()

    queue.enqueue(startState)

    while !queue.isEmpty {
        let state = queue.dequeue()

        if state.keys == allKeys {
            return distanceTo[state]
        }

        // TODO: Push new states to queue
    }
}
